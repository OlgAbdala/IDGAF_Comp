package company.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;

import company.beans.Application;
import company.beans.Application.ApplicationStatus;
import static company.dao.DAOUtility.*;

public class ApplicationDaoImpl implements ApplicationDao {
	
	private DAOFactory daoFactory;
	private static final String SQL_INSERT_APPLICATION="INSERT INTO Applications (internshipID,studentMail,status) "
													+ "VALUES(?,?,?)";
	private static final String SQL_SELECT_APPLICATION_FROM_ID="SELECT * FROM Applications WHERE ID=?";
	private static final String SQL_SELECT_APPLICATIONS_FROM_MAIL="SELECT * FROM Applications WHERE studentMail=?";
	private static final String SQL_SELECT_ALL_APPLICATIONS="SELECT * FROM Applications";
	
	public ApplicationDaoImpl(DAOFactory daoFactory){
		this.daoFactory=daoFactory;
	}
	
	@Override
	public void createApplication(Application app) throws DAOException{
		Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet autoGeneratedKeys=null;
        
        try{
            connection=daoFactory.getConnection();
            preparedStatement=initializePreparedStatement(connection, SQL_INSERT_APPLICATION, true, 
                    app.getInternshipID(),
                    app.getStudentMail(),
                    ApplicationStatus.NEW.toString());
            int status=preparedStatement.executeUpdate();
            if(status==0){
                throw new DAOException("Failed to insert an Application");
            }
            autoGeneratedKeys=preparedStatement.getGeneratedKeys();
            if(autoGeneratedKeys.next()){
                app.setID(autoGeneratedKeys.getLong(1));
            }
            else{
                throw new DAOException("Failed to insert an Application : no generated index returned");
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally{
            silentClosings(autoGeneratedKeys, preparedStatement, connection);
        }
	}
	@Override
	public Application retrieveApplication(int ID) throws DAOException{
		Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet resultSet=null;
        Application application=null;
        try{
            connection=daoFactory.getConnection();
            preparedStatement=initializePreparedStatement(connection, SQL_SELECT_APPLICATION_FROM_ID, false,ID);
            resultSet=preparedStatement.executeQuery();
            if(resultSet.next()){
                application=map(resultSet);
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally{
            silentClosings(resultSet, preparedStatement, connection);
        }
        return application;
	}
	@Override
	public List<Application> listAllApplications() throws DAOException{
		Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet resultSet=null;
        List<Application> applications=new ArrayList<Application>();
        
        try{
            connection=daoFactory.getConnection();
            preparedStatement=connection.prepareStatement(SQL_SELECT_ALL_APPLICATIONS);
            resultSet=preparedStatement.executeQuery();
            while(resultSet.next()){
                applications.add(map(resultSet));
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally{
            silentClosings(resultSet, preparedStatement, connection);
        }
        return applications;
	}
	@Override
	public List<Application> listApplicationsFromStudentMail(String email) throws DAOException{
		Connection connection=null;
        PreparedStatement preparedStatement=null;
        ResultSet resultSet=null;
        List<Application> applications=new ArrayList<Application>();
        try{
            connection=daoFactory.getConnection();
            preparedStatement=initializePreparedStatement(connection,SQL_SELECT_APPLICATIONS_FROM_MAIL, false, email);
            resultSet=preparedStatement.executeQuery();
            while(resultSet.next()){
                applications.add(map(resultSet));
            }
        }catch(SQLException e){
            throw new DAOException(e);
        }finally{
            silentClosings(resultSet, preparedStatement, connection);
        }
        return applications;
	}
	
	 private static Application map(ResultSet resultSet) throws SQLException {
	        Application application = new Application();
	        application.setInternshipID(resultSet.getInt("internshipID"));
	        application.setStudentMail(resultSet.getString("studentMail"));
	        application.setStatus(ApplicationStatus.valueOf(resultSet.getString("status")));
	        return application;
	    }
	
}
